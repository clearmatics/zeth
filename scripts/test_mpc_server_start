#!/usr/bin/env bash

. scripts/test_mpc_common.sh

set -e
. src/mpc/env/bin/activate
set -x

function prepare_server() {
    rm -rf ${SERVER_DIR}/server_state.json
    rm -rf ${SERVER_DIR}/server_config.json
    rm -rf ${TRANSCRIPT_FILE} ${FINAL_OUTPUT_FILE} ${FINAL_TRANSCRIPT_FILE} \
       ${SERVER_DIR}/next_challenge.bin
    mkdir -p ${SERVER_DIR}
    pushd ${SERVER_DIR}

    # Config
    now=`python -c 'import time; print(str(time.time()))'`
    sed -e "s/TIME/${now}/g" ${SERVER_CONFIG_TEMPLATE} \
        > ${SERVER_DIR}/server_config.json

    # TLS server certs
    if ! [ -e ${SERVER_KEY} ] || ! [ -e ${SERVER_CERT} ] ; then
        echo TLS certificate ...
        KEY_BITS=1024
        cp /etc/ssl/openssl.cnf openssl.tmp.cnf
        echo "[v3_req]" >> openssl.tmp.cnf
        echo "subjectAltName=DNS:localhost" >> openssl.tmp.cnf

        openssl req -x509 \
                -subj "/C=UK/ST=London/L=London/O=ClearmaticsTest/OU=Org/CN=localhost" \
                -reqexts v3_req \
                -extensions v3_req \
                -config openssl.tmp.cnf \
                -nodes \
                -newkey rsa:${KEY_BITS} \
                -keyout ${SERVER_KEY} \
                -out ${SERVER_CERT} \
                -days 365
    fi

    if ! [ -e ${CHALLENGE_0_FILE} ] ; then
        echo Initial challenge ...
        # Set up phase2
        pot_file=${SERVER_DIR}/_test_pot-${QAP_DEGREE}.bin
        lagrange_file=${SERVER_DIR}/_test_lagrange-${QAP_DEGREE}.bin
        linear_combination_file=${SERVER_DIR}/_test_linear_combination-${QAP_DEGREE}.bin
        # keypair_file=${SERVER_DIR}/_test_keypair-${QAP_DEGREE}.bin

        ${POT} --dummy ${pot_file} ${QAP_DEGREE}
        ${POT} --out ${lagrange_file} ${pot_file} ${QAP_DEGREE}
        ${MPC} linear-combination --out ${linear_combination_file} \
               ${pot_file} ${lagrange_file}
        ${MPC} phase2-begin --out ${CHALLENGE_0_FILE} ${linear_combination_file}
    fi

    popd
}

function start_server() {
    pushd ${SERVER_DIR}

    phase2_server > server.log &
    echo $! > server.pid

    while ! get_state ; do
        echo "TEST: waiting for server to start ..."
        sleep 1
    done
    echo "TEST: server up (pid: "`cat server.pid`")"
    popd
}

prepare_server
start_server
