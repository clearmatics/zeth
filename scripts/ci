#!/usr/bin/env bash

platform=`uname`
echo platform=${platform}
echo "running against commit: "`git log --oneline --no-decorate -n 1`

set -x
set -e

function format_check() {
    scripts/format
    git diff --no-ext-diff | head -n 20 > format_errors
    num_lines=`cat format_errors | wc -l`
    if [ "0" != "${num_lines}" ] ; then
        echo CODE FORMATTING ERRORS:
        cat format_errors
        exit 1
    fi
}

function command_tests() {
    # Setup the mpc python env and install dependencies
    scripts/mpc_setup

    # Execute checks on mpc python code
    pushd mpc
        . env/bin/activate
        make check
        deactivate
        popd

    # Execute the test scripts for pot-process, mpc, mpc server and client
    scripts/test_pot_process
    scripts/test_phase2
    scripts/test_mpc_server_phase2
}

function build() {
    build_type=$1
    full=$2

    # Enable warnings-as-errors
    cxx_flags="-Werror"

    if [ "Darwin" == "${platform}" ] ; then
        export PATH="/usr/local/opt/llvm/bin:/usr/local/bin:${PATH}"
        export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
        export LIBRARY_PATH="/usr/local/opt/openssl/lib"
        export LDFLAGS="-L/usr/local/lib"
        export CPPFLAGS="-I/usr/local/include"

        cxx_flags="${cxx_flags} -I/usr/local/opt/openssl/include"
        cxx_flags="${cxx_flags} -Wno-deprecated-declarations"
    fi

    cmake_flags="-DCMAKE_BUILD_TYPE=${build_type}"
    if ! [ "${full}" == "1" ] ; then
        cmake_flags="${cmake_flags} -DFAST_TESTS_ONLY=ON"
    fi

    . setup_env.sh
    mkdir -p build
    cd build
    cmake                                    \
        ${cmake_flags}                       \
        -DCMAKE_CXX_FLAGS="${cxx_flags}"     \
        ..

    make -j 2 VERBOSE=1 all build_tests
    make -j 2 check
    cd ..
}

function ci() {
    build $1 $2
    command_tests
}

build_type=$1
full_build=$2
if [ "${full_build}" == "" ] ; then
    if [ "${TRAVIS_PULL_REQUEST}" == "false" ] || [ "${TRAVIS_PULL_REQUEST}" == "" ] ; then
        full_build=0
    else
        full_build=1
    fi
fi

if [ "${CI_CHECK_FORMAT}" == "1" ] ; then
    format_check
fi

# The CI_USE_DOCKER variable determines whether we should
# re-execute the script in the docker container with CI_USE_DOCKER=0
if [ "${CI_USE_DOCKER}" == "1" ] ; then
    docker pull clearmatics/zeth-base:latest
    docker build -f Dockerfile-zeth -t zeth-dev .
    docker run -t -p 50051:50051 --name zeth zeth-dev:latest $0 ${build_type} ${full_build}
else
    ci $build_type ${build_type} ${full_build}
fi
