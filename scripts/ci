#!/usr/bin/env bash

platform=`uname`
echo platform=${platform}
echo "running against commit: "`git log --oneline --no-decorate -n 1`

set -x
set -e

function _setup_client() {
    pushd client
    python3 -m venv env
    . env/bin/activate
    pip install --upgrade pip --progress-bar off
    pip install --upgrade setuptools wheel
    make setup

    deactivate
    popd
}

function _ganache_is_active() {
    curl -sf \
         -H "Content-Type: application/json" \
         -X POST \
         --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[]}' \
         http://localhost:8545
}

function _start_ganache() {
    pushd zeth_contracts

    npm run testrpc > ganache.stdout &
    echo $! > ganache.pid

    # Wait for ganache to be active
    while ! _ganache_is_active ; do
        echo "_start_ganache: waiting for ganache ..."
        sleep 1
    done
    echo "_start_ganache: ganache is active"

    popd
}

function _stop_ganache() {
    pushd zeth_contracts
    if ! [ -e ganache.pid ] ; then
        echo "_stop_ganache: no PID file"
        return 1
    fi

    pid=`cat ganache.pid`
    while (kill "${pid}") ; do
        sleep 0.5
    done
    rm ganache.pid
    echo "_stop_ganache: ganache stopped"

    popd
}

function _build_setup() {
    # Extra deps for native builds
    if [ "${platform}" == "Linux" ] ; then
        if (which apk) ; then
            # Packages already available in Docker build
            echo -n             # null op required for syntax
        else
            sudo apt install \
                 libboost-dev \
                 libboost-system-dev \
                 libboost-filesystem-dev \
                 libboost-program-options-dev \
                 libgmp-dev \
                 libprocps-dev \
                 libxslt1-dev \
                 pkg-config
        fi
    fi
}

function check_format() {
    scripts/format
    git diff --no-ext-diff | head -n 20 > format_errors
    num_lines=`cat format_errors | wc -l`
    if [ "${num_lines}" != "0" ] ; then
        echo CODE FORMATTING ERRORS:
        cat format_errors
        exit 1
    fi

    # Perform the check for copyright notices here
    scripts/check_copyright
}

function check_contracts() {
    pushd zeth_contracts
    npm config set python python2.7
    npm install --unsafe-perm
    npm run check
    popd

    # Run contract tests (in python)
    _setup_client

    _start_ganache

    pushd client
    . env/bin/activate
    make test_contracts
    deactivate
    popd

    _stop_ganache

}

function check_client() {
    _setup_client

    pushd client
    . env/bin/activate

    make check

    deactivate
    popd
}

function check_cpp() {
    apk add cppcheck
    cppcheck --version

    # Configure and run clang-tidy cppcheck
    mkdir -p build
    pushd build
    # cmake -DUSE_CPP_CHECK=ON -DUSE_CLANG_TIDY=ON ..
    # make VERBOSE=1 clang-tidy -j 5
    cmake -DUSE_CPP_CHECK=ON ..
    make VERBOSE=1 cppcheck -j 5
    popd
}

function mpc_tests() {

    # These commands are only for the GROTH16 config
    if ! [ "${CI_ZKSNARK}" == "GROTH16" ] ; then
        return
    fi
    if ! [ "${CI_CURVE}" == "ALT_BN128" ] ; then
        return
    fi

    # Setup the mpc python env and install dependencies
    scripts/mpc_setup

    # Execute checks on mpc python code
    pushd mpc
    . env/bin/activate
    make check
    deactivate
    popd

    # Execute the test scripts for pot-process, mpc, mpc server and client
    scripts/test_pot_process
    scripts/test_phase2
    scripts/test_mpc_contributors_from_csv
    scripts/test_mpc_server_phase2
}

function build() {

    _build_setup

    # Additional compilation flags
    cxx_flags="-Werror"

    if [ "${platform}" == "Darwin" ] ; then
        openssl_path=$(brew --prefix openssl)
        export PATH="/usr/local/opt/llvm/bin:/usr/local/bin:${PATH}"
        export PKG_CONFIG_PATH="${openssl_path}/lib/pkgconfig"
        export LIBRARY_PATH="${openssl_path}/lib"
        export LDFLAGS="-L/usr/local/lib -L${openssl_path}/lib"
        export CPPFLAGS="-I/usr/local/include -I${openssl_path}/include"

        cxx_flags="${cxx_flags} -I${openssl_path}/include"
        cxx_flags="${cxx_flags} -Wno-deprecated-declarations"
    fi

    cmake_flags="-DCMAKE_BUILD_TYPE=${CI_CONFIG} -DZETH_SNARK=${CI_ZKSNARK}"
    cmake_flags="${cmake_flags} -DZETH_CURVE=${CI_CURVE}"
    if ! [ "${full_build}" == "1" ] ; then
        cmake_flags="${cmake_flags} -DFAST_TESTS_ONLY=ON"
    fi
    if (which ccache) ; then
        cmake_flags="${cmake_flags} -DCMAKE_C_COMPILER_LAUNCHER=ccache"
    fi

    # Build and run unit tests
    . setup_env.sh
    mkdir -p build
    cd build
    cmake                                    \
        ${cmake_flags}                       \
        -DCMAKE_CXX_FLAGS="${cxx_flags}"     \
        ..

    make -j 2 VERBOSE=1 all build_tests
    CTEST_OUTPUT_ON_FAILURE=1 make -j 2 check
    cd ..

    mpc_tests
}

function ci_setup() {

    if [ "${platform}" == "Darwin" ] ; then
        # Some of these commands can fail (if packages are already installed,
        # etc), hence the `|| echo`.
        brew update || echo
        brew install \
             gmp \
             grpc \
             protobuf \
             boost \
             openssl \
             cmake \
             libtool \
             autoconf \
             automake \
             || echo
    fi

    # The base docker image we use is Alpine
    # See: https://www.alpinelinux.org/
    if [ "${platform}" == "Linux" ] ; then

        if (which apk) ; then
            apk add --update npm

            # `py3-virtualenv` depends on `python3`
            # which installs the latest version of python3
            # See: https://pkgs.alpinelinux.org/package/edge/main/x86/python3
            # https://build.alpinelinux.org/buildlogs/build-edge-x86/main/python3/python3-3.8.2-r6.log
            apk add \
                py3-virtualenv \
                libffi-dev \
                python3-dev

            # Install openssl for the mpc tests
            apk add openssl
        else
            sudo apt update
            sudo apt install python3-venv
        fi

    fi
}


ci_task=$1
full_build=$2
if [ "${full_build}" == "" ] ; then
    if [ "${CI_EVENT_NAME}" == "pull_request" ] ; then
        full_build=1
    fi
fi

echo ci_task = ${ci_task}
echo full_build=${full_build}
echo CI_CONFIG=${CI_CONFIG}
echo CI_ZKSNARK=${CI_ZKSNARK}
echo CI_CURVE=${CI_CURVE}
echo CI_CHECK_FORMAT=${CI_CHECK_FORMAT}
echo CI_EVENT_NAME=${CI_EVENT_NAME}

if [ "${CI_CHECK_FORMAT}" == "1" ] ; then
    check_format
fi

if [ "${CI_ZKSNARK}" == "" ] ; then
    CI_ZKSNARK="GROTH16"
fi

if [ "${CI_CURVE}" == "" ] ; then
   CI_CURVE="ALT_BN128"
fi

# The CI_USE_DOCKER variable determines whether we should
# re-execute the script in the docker container with CI_USE_DOCKER=0
if [ "${CI_USE_DOCKER}" == "1" ] ; then
    docker pull clearmatics/zeth-base:latest
    docker build -f Dockerfile-dev -t zeth-dev .
    docker run \
           -t \
           -p 50051:50051 \
           --name zeth \
           --env CI_CONFIG=${CI_CONFIG} \
           --env CI_ZKSNARK=${CI_ZKSNARK} \
           --env CI_CURVE=${CI_CURVE} \
           zeth-dev:latest $0 ${ci_task} ${full_build}
else
    ci_setup
    ${ci_task}
fi
