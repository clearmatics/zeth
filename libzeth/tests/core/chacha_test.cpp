// Copyright (c) 2015-2021 Clearmatics Technologies Ltd
//
// SPDX-License-Identifier: LGPL-3.0+

#include "libzeth/core/chacha_rng.hpp"
#include "libzeth/core/utils.hpp"

#include <gtest/gtest.h>

using namespace libzeth;

namespace
{

TEST(ChaChaTest, ChaChaRng)
{
    // expect_output is generated by the ChaChaRng implementation used in the
    // zcash powersoftau and phase2 Rust code.

    const std::string seed = hex_to_bytes(
        "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
    const std::string expect_output_0 = hex_to_bytes(
        "1fbc70a0206f844bb7b62ace04d25ee4de8a512b608ea1fdf2269c36f4eafb");
    const std::string expect_output_1 = hex_to_bytes(
        "7f5941a5cd2fbe3da5c1579ec2d6fdcfd2f474bb4c93b5be09294045cb69dfe2");
    const std::string expect_output_2 = hex_to_bytes(
        "6a10e6ac34b7180858b9964b082e617446477164a623066dc0d6b8da37b67351"
        "c00b43600b984a6d637503e25aae1719b1f0df6a315d0dc9cf0210b1d8d77e13");

    chacha_rng rng(seed.data(), seed.size());
    uint8_t output[64];

    auto check_output = [&](const std::string &expect_out,
                            const std::string &label) {
        rng.random(&output[0], expect_out.size());
        ASSERT_EQ(0, memcmp(expect_out.data(), output, expect_out.size()))
            << label;
    };

    check_output(expect_output_0, "expect_output_0");
    check_output(expect_output_1, "expect_output_1");
    check_output(expect_output_2, "expect_output_2");
}

} // namespace

int main(int argc, char **argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
