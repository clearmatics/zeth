#!/usr/bin/env python3

from coordinator.client import Client
from coordinator.mpc_command import MPCCommand
from coordinator.crypto import \
    compute_file_digest, import_signing_key, get_verification_key, sign
from typing import Optional
from click import command, option, argument, ClickException


CHALLENGE_FILE = "challenge.bin"
RESPONSE_FILE = "response.bin"
RESPONSE_DIGEST_FILE = "response.bin.digest"


@command()
@argument("base-url")
@argument("key-file")
@option("--challenge", default=CHALLENGE_FILE)
@option("--response", default=RESPONSE_FILE)
@option("--response-digest", default=RESPONSE_DIGEST_FILE)
@option("--mpc-executable", default=None, help="path to mpc executable")
@option("--skip-user-input", is_flag=True, default=False)
def phase2_contribute(
        base_url: str,
        key_file: str,
        challenge: str,
        response: str,
        response_digest: str,
        mpc_executable: Optional[str],
        skip_user_input: bool) -> None:
    """
    Download a challenge, then compute, sign and upload an MPC contribution
    """

    # Check key upfront
    with open(key_file, "rb") as key_f:
        sk = import_signing_key(key_f.read())
    print("got key")

    # Get challenge
    client = Client(base_url)
    client.get_challenge(challenge)
    print("got challenge")

    # Compute contribution
    mpc = MPCCommand(mpc_executable)
    contribution_success = mpc.phase2_contribute(
        challenge,
        response,
        response_digest,
        skip_user_input)
    if not contribution_success:
        raise ClickException("failed to generate response")

    # Compute digest and sign
    digest = compute_file_digest(response)
    signature = sign(sk, digest)
    vk = get_verification_key(sk)

    client.push_contribution(response, digest, vk, signature)


if __name__ == "__main__":
    phase2_contribute()
