#include <grpc/grpc.h>
#include <grpcpp/security/server_credentials.h>
#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>
#include <grpcpp/server_context.h>
#include <iostream>
#include <memory>
#include <stdio.h>
#include <string>

// Necessary header to parse the data
#include <libsnark/common/data_structures/merkle_tree.hpp>

// Include zeth headers
#include "libsnark_helpers/libsnark_helpers.hpp"
#include "snarks_alias.hpp"
#include "util.hpp"
#include "util_api.hpp"
#include "zeth.h"
#include "zethConfig.h"

// Include the file generated by gRPC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#include "api/prover.grpc.pb.h"
#pragma GCC diagnostic pop

// Include circuit wrapper that makes use of the conditioned imported files
// above
#include "circuit-wrapper.hpp"

// Include the API for the given SNARK
#include "snarks_api_imports.hpp"

// Include hash function circuit
#include "circuits/blake2s/blake2s_comp.hpp"

namespace proto = google::protobuf;

// Instantiate the templates with the right types
//
// Instantiated from the curve specified in the CMakelists.txt
typedef libff::default_ec_pp ppT;
typedef libff::Fr<ppT> FieldT;
// Hash used in the merkle tree
typedef MiMC_mp_gadget<FieldT> HashTreeT;
// Hash used for the commitments and PRFs
typedef BLAKE2s_256_comp<FieldT> HashT;

/// The prover_server class inherits from the Prover service
/// defined in the proto files, and provides an implementation
/// of the service.
class prover_server final : public prover_proto::Prover::Service
{
private:
    libzeth::circuit_wrapper<
        FieldT,
        HashT,
        HashTreeT,
        ppT,
        ZETH_NUM_JS_INPUTS,
        ZETH_NUM_JS_OUTPUTS>
        prover;

    // The keypair is the result of the setup
    keyPairT<ppT> keypair;

public:
    explicit prover_server(
        libzeth::circuit_wrapper<
            FieldT,
            HashT,
            HashTreeT,
            ppT,
            ZETH_NUM_JS_INPUTS,
            ZETH_NUM_JS_OUTPUTS> &prover,
        keyPairT<ppT> &keypair)
        : prover(prover), keypair(keypair)
    {
    }

    grpc::Status GetVerificationKey(
        grpc::ServerContext *,
        const proto::Empty *,
        prover_proto::VerificationKey *response) override
    {
        std::cout << "[ACK] Received the request to get the verification key"
                  << std::endl;
        std::cout << "[DEBUG] Preparing verification key for response..."
                  << std::endl;
        try {
            prepare_verification_key_response<ppT>(this->keypair.vk, response);
        } catch (const std::exception &e) {
            std::cout << "[ERROR] " << e.what() << std::endl;
            return grpc::Status(
                grpc::StatusCode::INVALID_ARGUMENT, grpc::string(e.what()));
        } catch (...) {
            std::cout << "[ERROR] In catch all" << std::endl;
            return grpc::Status(grpc::StatusCode::UNKNOWN, "");
        }

        return grpc::Status::OK;
    }

    grpc::Status Prove(
        grpc::ServerContext *,
        const prover_proto::ProofInputs *proof_inputs,
        prover_proto::ExtendedProof *proof) override
    {
        std::cout << "[ACK] Received the request to generate a proof"
                  << std::endl;
        std::cout << "[DEBUG] Parse received message to compute proof..."
                  << std::endl;

        // Parse received message to feed to the prover
        try {
            FieldT root =
                libzeth::string_to_field<FieldT>(proof_inputs->mk_root());
            libzeth::bits64 vpub_in = libzeth::hexadecimal_value_to_bits64(
                proof_inputs->pub_in_value());
            libzeth::bits64 vpub_out = libzeth::hexadecimal_value_to_bits64(
                proof_inputs->pub_out_value());
            libzeth::bits256 h_sig_in =
                libzeth::hexadecimal_digest_to_bits256(proof_inputs->h_sig());
            libzeth::bits256 phi_in =
                libzeth::hexadecimal_digest_to_bits256(proof_inputs->phi());

            if (ZETH_NUM_JS_INPUTS != proof_inputs->js_inputs_size()) {
                throw std::invalid_argument("Invalid number of JS inputs");
            }
            if (ZETH_NUM_JS_OUTPUTS != proof_inputs->js_outputs_size()) {
                throw std::invalid_argument("Invalid number of JS outputs");
            }

            std::cout << "[DEBUG] Process every inputs of the JoinSplit"
                      << std::endl;
            std::array<libzeth::joinsplit_input<FieldT>, ZETH_NUM_JS_INPUTS>
                joinsplit_inputs;
            for (int i = 0; i < ZETH_NUM_JS_INPUTS; i++) {
                prover_proto::JoinsplitInput received_input =
                    proof_inputs->js_inputs(i);
                libzeth::joinsplit_input<FieldT> parsed_input =
                    parse_joinsplit_input<FieldT>(received_input);
                joinsplit_inputs[i] = parsed_input;
            }

            std::cout << "[DEBUG] Process every outputs of the JoinSplit"
                      << std::endl;
            std::array<libzeth::zeth_note, ZETH_NUM_JS_OUTPUTS>
                joinsplit_outputs;
            for (int i = 0; i < ZETH_NUM_JS_OUTPUTS; i++) {
                prover_proto::ZethNote received_output =
                    proof_inputs->js_outputs(i);
                libzeth::zeth_note parsed_output =
                    parse_zeth_note(received_output);
                joinsplit_outputs[i] = parsed_output;
            }

            std::cout << "[DEBUG] Data parsed successfully" << std::endl;
            std::cout << "[DEBUG] Generating the proof..." << std::endl;
            extended_proof<ppT> ext_proof = this->prover.prove(
                root,
                joinsplit_inputs,
                joinsplit_outputs,
                vpub_in,
                vpub_out,
                h_sig_in,
                phi_in,
                this->keypair.pk);

            std::cout << "[DEBUG] Displaying the extended proof" << std::endl;
            ext_proof.dump_proof();
            ext_proof.dump_primary_inputs();

            std::cout << "[DEBUG] Preparing response..." << std::endl;
            prepare_proof_response<ppT>(ext_proof, proof);

        } catch (const std::exception &e) {
            std::cout << "[ERROR] " << e.what() << std::endl;
            return grpc::Status(
                grpc::StatusCode::INVALID_ARGUMENT, grpc::string(e.what()));
        } catch (...) {
            std::cout << "[ERROR] In catch all" << std::endl;
            return grpc::Status(grpc::StatusCode::UNKNOWN, "");
        }

        return grpc::Status::OK;
    }
};

std::string get_server_version()
{
    char buffer[100];
    int n;
    n = snprintf(
        buffer,
        100,
        "Version %d.%d",
        ZETH_VERSION_MAJOR,
        ZETH_VERSION_MINOR); // Defined in the zethConfig file
    if (n < 0) {
        return "Version <Not specified>";
    }
    std::string version(buffer);
    return version;
}

void display_server_start_message()
{
    std::string copyright =
        "Copyright (c) 2015-2019 Clearmatics Technologies Ltd";
    std::string license = "SPDX-License-Identifier: LGPL-3.0+";
    std::string project =
        "R&D Department: PoC for Zerocash on Ethereum/Autonity";
    std::string version = get_server_version();
    std::string warning = "**WARNING:** This code is a research-quality proof "
                          "of concept, DO NOT use in production!";

    std::cout << "\n=====================================================\n";
    std::cout << copyright << "\n";
    std::cout << license << "\n";
    std::cout << project << "\n";
    std::cout << version << "\n";
    std::cout << warning << "\n";
    std::cout << "=====================================================\n"
              << std::endl;
}

void RunServer(
    libzeth::circuit_wrapper<
        FieldT,
        HashT,
        HashTreeT,
        ppT,
        ZETH_NUM_JS_INPUTS,
        ZETH_NUM_JS_OUTPUTS> &prover,
    keyPairT<ppT> &keypair)
{
    // Listen for incoming connections on 0.0.0.0:50051
    std::string server_address("0.0.0.0:50051");

    prover_server service(prover, keypair);

    grpc::ServerBuilder builder;

    // Listen on the given address without any authentication mechanism.
    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());

    // Register "service" as the instance through which we'll communicate with
    // clients. In this case it corresponds to an *synchronous* service.
    builder.RegisterService(&service);

    // Finally assemble the server.
    std::unique_ptr<grpc::Server> server(builder.BuildAndStart());
    std::cout << "[DEBUG] Server listening on " << server_address << std::endl;

    // Wait for the server to shutdown. Note that some other thread must be
    // responsible for shutting down the server for this call to ever return.
    display_server_start_message();
    server->Wait();
}

int main(int, char **)
{
    // We inititalize the curve parameters here
    std::cout << "[DEBUG] Init params" << std::endl;
    ppT::init_public_params();

    std::cout << "[DEBUG] Run setup" << std::endl;
    libzeth::circuit_wrapper<
        FieldT,
        HashT,
        HashTreeT,
        ppT,
        ZETH_NUM_JS_INPUTS,
        ZETH_NUM_JS_OUTPUTS>
        prover;
    keyPairT<ppT> keypair = prover.generate_trusted_setup();

    std::cout << "[DEBUG] Setup successful, starting the server..."
              << std::endl;
    RunServer(prover, keypair);
    return 0;
}
