{
    # .clang-format in root of repository.  To run on single file:
    #
    #   $ clang-format -style=file -i <file path>
    #
    # To run on whole repo:
    #
    #   $ scripts/format

    # llvm coding standard is used as a starting point
    # https://llvm.org/docs/CodingStandards.html
    BasedOnStyle: llvm,

    # BASICS

    Standard: C++11,
    IndentWidth: 4,
    AccessModifierOffset: -4,
    UseTab: Never,
    FixNamespaceComments: "true",
    IncludeBlocks: Regroup,
    MaxEmptyLinesToKeep: 1,
    BreakBeforeTernaryOperators: "true",
    SpaceBeforeCpp11BracedList: "false",
    Cpp11BracedListStyle: "true",
    KeepEmptyLinesAtTheStartOfBlocks: "true",
    AllowShortIfStatementsOnASingleLine: "false",
    SpaceAfterTemplateKeyword: "false",
    AlwaysBreakAfterReturnType: None,
    PenaltyReturnTypeOnItsOwnLine: 10000000,
    SpaceAfterCStyleCast: "false",
    SpaceBeforeAssignmentOperators: "true",

    # ARGUMENTS AND PARAMETERS PACKING
    # Aligning arguments and parameters to brackets is hard to
    # maintain.  If arguments span multiple lines, more than one
    # argument per line is difficult to parse.
    #
    # GOOD:
    #   my_function(a, b, c);
    #   my_function(
    #       very,
    #       long,
    #       multi,
    #       line,
    #       parameter,
    #       list);
    #   my_function(
    #       very, long, parameter, list);
    #
    # BAD:
    #   // Hard to maintain and generates unnecessary changes as
    #   // functions are renamed.
    #   my_function(very,
    #               long,
    #               multi,
    #               line,
    #               parameter,
    #               list);
    #
    #   // Difficult to parse arguments
    #   my_function(
    #       very, long, multi, line,
    #       parameter, list);
    #
    #   (NOTE: this seems to cause breaks in very long template
    #   parameter lists, but that seems like a reasonable price to
    #   occasionally pay to avoid ambiguity)

    AlignAfterOpenBracket: AlwaysBreak,
    AllowAllParametersOfDeclarationOnNextLine: "true",
    BinPackArguments: "false",
    BinPackParameters: "false",

    AlwaysBreakTemplateDeclarations: MultiLine,

    # BRACE POSITIONING
    # Braces at end of line:
    #
    #   if (cond) {
    #       x = 0;
    #   } else {
    #       x = 1;
    #   }
    #
    # except for namespaces, functions, classes, (where indentation
    # often does not give us good visual cues):

    BreakBeforeBraces: Linux,

    # CONSTRUCTOR INITIALIZERS
    # Constructor initializer packed similarly to function parameters,
    # with separators before the member names.
    #
    # GOOD:
    #   my_class::my_class()
    #     : parent()
    #     , member1(x)
    #     , member2(y)
    #   {
    #   }
    #
    # BAD:
    #   // Annoying to reorder and indent
    #   my_class::my_class()
    #     : parent(),
    #       member1(x),
    #       member2(y)
    #   {
    #   }
    #
    #   // Annoying to reorder
    #   my_class::my_class() :
    #     parent(),
    #     member1(x),
    #     member2(y)
    #   {
    #   }

    BreakConstructorInitializers: BeforeComma,
    BreakInheritanceList: BeforeComma,
    ConstructorInitializerAllOnOneLineOrOnePerLine: "true",
    # AllowAllConstructorInitializersOnNextLine: "false",

    # ADDITIONAL NOTES
    #
    #  - Long comments at the end of lines cause unnecessary line
    #    breaks. Better to comment above the line (do not add
    #    add empty line between the comment and the line).
    #
    #  - Multi-line comments should use `//` style (clang-format
    #    does not cope well with other styles).
    #      // Your comment here line 1
    #      // line 2
    #
    #  - Avoid `using namespace`, even in .cpp files.
    #
    #  - Use `auto` only when it is strictly necessary, avoid otherwise.
    #
    #  - Always use braces with control flow statements (if, for, while...)
    #    GOOD:
    #      if (condition) {
    #          x = 0;
    #      } else {
    #          x = 1;
    #      }
    #
    #    BAD:
    #       if (condition)
    #           x = 0;
    #       else
    #           x = 1;
    #
    #  - `//` can be used at the end of a line in an initializer to retain
    #    formatting:
    #      libsnark::pb_variable_array<FieldT> value = from_bits(
    #          {
    #              0, 0, 1, 0, 1, 1, 1, 1, //    <--- these breaks will remain
    #              0, 0, 0, 0, 0, 0, 0, 0, //
    #              0, 0, 0, 0, 0, 0, 0, 0, //
    #              0, 0, 0, 0, 0, 0, 0, 0, //
    #              ...
    #
    #  - Do not leave whitespace at the end of lines
}
