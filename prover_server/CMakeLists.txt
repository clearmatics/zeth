find_package(Protobuf REQUIRED)
find_package(gRPC REQUIRED)

if ("${STATIC_BUILD}")
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(GRPC REQUIRED IMPORTED_TARGET grpc++)
endif()

# Note:
# The target directory `PROTO_SRC_DIR` is created in the parent CMakeLists.txt.
# This target contains the protobuf and gRPC files generated by the compilation
# of the different targets.
# We could decide to keep the build of the targets independent though.
# As such, we would rather create the target directory `PROTO_SRC_DIR`
# in the target's CMakeLists.txt, from `CMAKE_CURRENT_BINARY_DIR`.
# Doing so would add redundancy in the CMakeLists.txt files but would
# keep the build of the target independent.

# Add the directory containing the Protobuf and gRPC generated files.
# `PROTO_SRC_DIR` is defined in the parent CMakeLists.txt
include_directories(SYSTEM ${PROTO_SRC_DIR})

# Function defined in the cmake scripts in the cmake folder.
# Generate the gRPC files, and set the result of the generation in the
# given env var (GRPC_SRCS, GRPC_HDRS)
# protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROTO_SRC_DIR} ${PROTO_FILES})
grpc_generate_cpp(GRPC_SRCS GRPC_HDRS ${PROTO_SRC_DIR} ${PROTO_FILES})

set_property(SOURCE ${GRPC_SRCS} PROPERTY
  COMPILE_FLAGS "-Wno-unused-variable -Wno-unused-parameter"
)

# Enable Boost for program_options
find_package(Boost REQUIRED COMPONENTS system filesystem program_options)
include_directories(SYSTEM ${Boost_INCLUDE_DIR})

# Add the binary tree to the search path for include files
# so that we will find zethConfig.h
include_directories(${PROJECT_BINARY_DIR})

# prover_server executable
file(
  GLOB_RECURSE
  PROVER_SERVER_SOURCE
  prover_server.cpp
)
add_executable(
  prover_server
  ${PROVER_SERVER_SOURCE}
  ${GRPC_SRCS}
)
if ("${STATIC_BUILD}")
  target_link_libraries(
    prover_server

    zeth
    ${Boost_SYSTEM_LIBRARY}
    ${Boost_FILESYSTEM_LIBRARY}
    ${Boost_PROGRAM_OPTIONS_LIBRARY}
    ${GRPC_LIBRARIES}
    gRPC::grpc++_reflection
    protobuf::libprotobuf
  )
else()
  target_link_libraries(
    prover_server

    zeth
    ${Boost_SYSTEM_LIBRARY}
    ${Boost_FILESYSTEM_LIBRARY}
    ${Boost_PROGRAM_OPTIONS_LIBRARY}
    gRPC::grpc++_reflection
    protobuf::libprotobuf
  )
endif()
