#!/usr/bin/env python3

from coordinator.contributor_list import ContributorList, Contributor
from coordinator.crypto import \
    import_verification_key, import_signature, check_key_evidence
from click import command, argument, option, ClickException
from typing import Dict
import csv

DEFAULT_EMAIL_FIELD_NAME = "Email"
DEFAULT_KEY_FIELD_NAME = "Contributor Verification Key"
DEFAULT_EVIDENCE_FIELD_NAME = "Key Evidence"


@command()
@argument("contributors-csv")
@argument("output-contributors")
@option(
    "--email-field",
    default=DEFAULT_EMAIL_FIELD_NAME,
    help=f"email field name (default: \"{DEFAULT_EMAIL_FIELD_NAME}\")")
@option(
    "--key-field",
    default=DEFAULT_KEY_FIELD_NAME,
    help=f"key field name (default: \"{DEFAULT_KEY_FIELD_NAME}\")")
@option(
    "--evidence-field",
    default=DEFAULT_EVIDENCE_FIELD_NAME,
    help=f"evidence field name (default: \"{DEFAULT_EVIDENCE_FIELD_NAME}\")")
def contributors_from_csv(
        contributors_csv: str,
        output_contributors: str,
        email_field: str,
        key_field: str,
        evidence_field: str) -> None:
    """
    Parse a csv list of contributors and create a contributors json file.
    Check the key evidence to ensure claimed verification keys are valid.
    """
    contributors = read_contributors_from_csv(
        contributors_csv,
        email_field=email_field,
        key_field=key_field,
        evidence_field=evidence_field)

    with open(output_contributors, "w") as config_f:
        config_f.write(contributors.to_json())


def read_contributors_from_csv(
        csv_file: str,
        email_field: str,
        key_field: str,
        evidence_field: str) -> ContributorList:
    """
    Read a csv file (of the format output from Google Forms), and create a list
    of contributors from it.
    """
    with open(csv_file, "r") as csv_f:
        reader = csv.DictReader(csv_f)

        def _row_to_contributor(row: Dict[str, str]) -> Contributor:
            email = row[email_field]
            try:
                key = import_verification_key(row[key_field])
                evidence = import_signature(row[evidence_field])
                if not check_key_evidence(key, evidence):
                    raise ClickException("invalid key evidence")
            except Exception as ex:
                raise ClickException(f"contributor {email}: {ex}")
            return Contributor(email, key, evidence)

        return ContributorList([_row_to_contributor(row) for row in reader])


if __name__ == "__main__":
    contributors_from_csv()
